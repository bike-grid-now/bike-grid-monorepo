---
import Agenda from "../lib/components/Agenda.svelte";
import Slides from "../lib/components/Slides.svelte";
import Hero from "../old-pages/Hero.svelte";
import CallToAction from "../old-pages/CallToAction.svelte";
import CardContainer from "../old-pages/CardContainer.svelte";

import Container from "../components/Container.astro";
import Layout from "../layouts/Layout.astro";
import {
  upcomingEvents,
  pastEvents,
  type Event,
  getSiteSettings,
} from "../lib/sanity";
import {
  getCallsToAction,
  type CallToAction as CallToActionType,
} from "../lib/sanity/callsToAction";

function mapEvent({
  slug: { current: slug },
  name,
  date: { local: date },
  poster,
}: Event) {
  return { slug, name, date, poster: poster! };
}

function mapCTA({ text, link, enabled }: CallToActionType) {
  return { text, link, enabled };
}

const [futureEventsList, pastEventsList, callsToAction, siteSettings] =
  await Promise.all([
    upcomingEvents(),
    pastEvents(),
    getCallsToAction(),
    getSiteSettings(),
  ]);

const data = {
  pastEvents: pastEventsList.map(mapEvent) || [],
  upcomingEvents: futureEventsList.map(mapEvent) || [],
  callsToAction: callsToAction.map(mapCTA) || [],
  siteSettings,
};

const nextEvent = upcomingEvents.length > 0 ? data.upcomingEvents[0] : null;
---

<Layout title="">
  <Hero title={siteSettings.heroTitle} tagline={siteSettings.heroTagline} />

  <Container>
    <div class="content main-content">
      <CallToAction data={callsToAction} />
      <div class="sideby">
        {nextEvent && <Slides events={data.upcomingEvents} />}

        {
          upcomingEvents.length > 0 && (
            <Agenda
              events={data.upcomingEvents}
              title="Upcoming Events"
              client:visible
            />
          )
        }
      </div>

      <CardContainer />
      <Agenda events={data.pastEvents} title="Past Events" client:visible />
    </div>
  </Container>
</Layout>

<style>
  .sideby {
    display: grid;
    grid-gap: calc(5 * var(--space));
    grid-template-columns: 1fr 1fr;
  }

  .content {
    padding: 0 calc(5 * var(--space));
  }

  .main-content {
    display: flex;
    flex-direction: column;
    grid-gap: calc(6 * var(--space));
    margin-top: calc(6 * var(--space));
  }

  @media only screen and (max-width: 800px) {
    .sideby {
      grid-template-columns: 1fr;
    }
  }
</style>
